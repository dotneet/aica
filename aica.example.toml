[llm]
# provider = 'openai' | 'anthropic' | 'google'
provider = 'anthropic'

[llm.openai]
model = 'o3-mini'
temperature = 0.5
maxCompletionTokens = 20000
reasoningEffort = 'medium'
# logFile = '/path/to/openai.log'  # Optional: Path to log OpenAI API calls

[llm.anthropic]
model = 'claude-3-7-sonnet-20250219'
temperature = 0.5
maxTokens = 8000
# logFile = '/path/to/anthropic.log'  # Optional: Path to log Anthropic API calls

[llm.google]
model = 'gemini-2.0-flash'
temperature = 0.5
maxTokens = 8000
# logFile = '/path/to/google.log'  # Optional: Path to log Google API calls

[rules]
# search .cursor/rules/*.mdc and include a file in the context if the file matches the pattern.
findCursorRules = true
# always include the following files in the context if exists.
files = [
    ".cursorrules",
]

[language]
# if set language to 'auto', aica try to detect language from environment variable.
# language = 'English'
# language = 'Japanese'
language = 'auto'

[source]
includePatterns = [
    "**/*.{js,ts,jsx,tsx,java,dart,kt,scala,go,rs,zig,rb,php,py,prisma,sql}",
]

excludePatterns = [
    "node_modules/**",
    "vendor/**",
    "tmp/**",
    "dist/**",
    "out/**",
    "test/**",
    "tests/**",
    "spec/**",
    "specs/**",
    "doc/**",
    "docs/**",
    "**/*.test.ts",
]

[embedding]
provider = 'openai'

[embedding.openai]
model = 'text-embedding-3-small'

[knowledge.fixture]
# these files are embedded in an user prompt as a knowledge always.
# files = ["testdata/docs/spec.txt"]

[knowledge.codeSearch]
# code search provides symbol based search for the given directory.
# directory = "testdata/src"
persistentFilePath = "knowledge-src.db"
includePatterns = [
    "**/*.{ts,js,jsx,tsx,java,dart,kt,scala,go,rs,zig,rb,php,py,prisma,sql}",
]
excludePatterns = [
    "node_modules/**",
    "vendor/**",
    "tmp/**",
    "dist/**",
    "out/**",
]


[knowledge.documentSearch]
# document search provides vector based search for the given directory.
# directory = "testdata/docs"
persistentFilePath = "knowledge-doc.db"
includePatterns = ["**/*.{md,txt,adoc,html}"]
excludePatterns = [
    "node_modules/**",
    "vendor/**",
    "tmp/**",
    "dist/**",
    "out/**",
]


[review.prompt]
system = "You are a QA engineer reviewing code for bugs."
rules = [
    "Provide list of critical or high risk bugs and security issues.",
    "Use JSON format to return the issues.",
    "Only provide when you are convinced that it is a bug absolutely.",
    "No need to output low risk bugs and error handling problems.",
    "Provide up to 5 issues.",
]

user = "Identify and list any critical bugs in the code below, with brief explanations for each."

[summary.prompt]
system = "You are a senior software engineer."
rules = [
    "Provide list of the brief summary of the changes in the given code.",
    "Given code maybe a diff or a code snippet.",
    "Use JSON format to return the explanation of changes.",
]

user = """\
Summarize the given code changes.\n\
\n\
=== CODE ===\n\
%CODE%\n\
============\n\
"""

[commitMessage.prompt]
system = "You are an senior software engineer."
rules = [
    "Generate a one-line commit message based on the given diff.",
    "Response must be less than 80 characters.",
]
user = """
Generate one-line commit message based on given diff.
use the prefixies like "fix", "feat", "refactor", "chore", "test", "docs", "style", "perf", "ci", "build", "revert", "merge", "other" to describe the changes.
EXAMPLES:
- fix: fix the bug
- feat: add the feature
- refactor: refactor the code
- chore: update the dependencies
- test: add the test
- docs: update the documentation
- style: update the style
"""

[pullRequest]
# generate a summary of the changes as a pull request description.
withSummary = true
# if true, create a pull request as a draft.
draft = false

[chat]
system = "You are a helpful assistant. Answer the user's question."

[mcp]
# MCP setup file is a JSON file that describes the MCP server.
#
# Example:
# [{
#     "name": "product",
#     "type": "stdio",
#     "command": "node",
#     "args": ["./server2.js"]
# },
# {
#     "name": "product",
#     "type": "sse",
#     "url": "http://localhost:3001/sse"
# }
#]
#
# path to MCP setup file
# setupFile = "mcp.json"
setupFile = ""